#!/usr/bin/env php
<?php
//
// Copyright (c) 2013, Zynga Inc.
// https://github.com/zynga/saigon
// Author: Matt West (https://github.com/mhwest13)
// License: BSD 2-Clause
//

/**
 *  Nagios Tester
 *      Consumer / Async Job Executor for Diff / Show / Test Config Jobs
 */

/* Requires for includes of functions and definitions */
require_once dirname(dirname(__FILE__)).'/conf/saigon-tester.inc.php';
// Lets load up the composer autoloader
require_once BASE_PATH. '/vendor/autoload.php';
// Lets load up the saigon autoloader
require_once BASE_PATH.'/lib/classLoader.class.php';
Saigon_ClassLoader::register();

declare(ticks = 1);

/**
 * sighandler
 * 
 * @param mixed $signal signal being passed in
 *
 * @access public
 * @return void
 */
function sighandler($signal)
{
    global $run;
    echo "Caught signal $signal, exiting gracefully...\n";
    $run = false;
    sleep(1);
    exit(0);
}

/**
 * testBuild 
 * 
 * @param mixed $deployment    deployment we are building for test purposes
 * @param mixed $revision      revision we are building for test purposes
 * @param mixed $subdeployment subdeployment we maybe processing
 *
 * @access public
 * @return void
 */
function testBuild($deployment, $revision, $subdeployment = false, $shardposition)
{
    $starttime = time();
    if (($subdeployment !== false) && (!empty($subdeployment))) {
        NagCreate::setSubDeployment($subdeployment);
    }
    $buildReturn = NagCreate::buildDeployment($deployment, $revision, false, true, $shardposition);
    if ($buildReturn !== true) {
        $buildOutput['starttime'] = $starttime;
        $buildOutput['timestamp'] = time();
        $buildOutput['output'] = base64_encode($buildReturn);
        $buildOutput['exitcode'] = 1;
        $buildOutput['subdeployment'] = $subdeployment;
        NagTester::setDeploymentTestInfo($deployment, $subdeployment, $revision, $buildOutput);
        unset($buildOutput, $buildReturn);
    }
    else {
        $testReturn = NagCreate::testDeployment($deployment);
        $testReturn['starttime'] = $starttime;
        $testReturn['timestamp'] = time();
        $testReturn['output'] = base64_encode(implode("\n", $testReturn['output']));
        $testReturn['subdeployment'] = $subdeployment;
        NagTester::setDeploymentTestInfo($deployment, $subdeployment, $revision, $testReturn);
        unset($testReturn, $buildReturn);
    }
    unset($starttime);
    return;
}

/**
 * showBuild 
 * 
 * @param mixed $deployment    deployment we are building configs for
 * @param mixed $revision      revision of configs we are building
 * @param mixed $subdeployment subdeployment we may be processing
 *
 * @access public
 * @return void
 */
function showBuild($deployment, $revision, $subdeployment = false, $shardposition = false)
{
    $starttime = time();
    if (($subdeployment !== false) && (!empty($subdeployment))) {
        NagCreate::setSubDeployment($subdeployment);
    }
    $buildReturn = NagCreate::buildDeployment($deployment, $revision, false, true, $shardposition);
    if ($buildReturn !== true) {
        $buildOutput['starttime'] = $starttime;
        $buildOutput['timestamp'] = time();
        $buildOutput['output'] = $buildReturn;
        $buildOutput['exitcode'] = 1;
        $buildOutput['subdeployment'] = $subdeployment;
        NagTester::setDeploymentBuildInfo($deployment, $subdeployment, $revision, $buildOutput);
        unset($buildOutput, $buildReturn);
    }
    else {
        $configOutput['configs'] = json_encode(NagCreate::returnDeploymentConfigs($deployment));
        $configOutput['starttime'] = $starttime;
        $configOutput['timestamp'] = time();
        $configOutput['exitcode'] = 0;
        $configOutput['subdeployment'] = $subdeployment;
        NagTester::setDeploymentBuildInfo($deployment, $subdeployment, $revision, $configOutput);
        unset($configOutput, $buildReturn);
    }
    unset($starttime);
    return;
}

/**
 * diffBuild 
 * 
 * @param mixed $deployment    deployment we are diffing
 * @param mixed $fromrev       from revision we are diffing
 * @param mixed $torev         to revision we are diffing
 * @param mixed $subdeployment subdeployment we may be told to build
 *
 * @access public
 * @return void
 */
function diffBuild($deployment, $fromrev, $torev, $subdeployment = false, $shardposition = false)
{
    $results = array();
    $starttime = time();
    if (($subdeployment !== false) && (!empty($subdeployment))) {
        NagCreate::setSubDeployment($subdeployment);
    }
    $return = NagDiff::buildDiffRevisions($deployment, $subdeployment, $fromrev, $torev, $shardposition);
    if ($return === false) {
        $results['output'] = base64_encode(NagDiff::getOutput());
        $results['starttime'] = $starttime;
        $results['timestamp'] = time();
        $results['fromrev'] = $fromrev;
        $results['torev'] = $torev;
        $results['status'] = 'failed';
        $results['subdeployment'] = $subdeployment;
        NagTester::setDeploymentDiffInfo($deployment, $subdeployment, $results);
    }
    else {
        $results['configs'] = json_encode(NagDiff::getResults());
        $results['starttime'] = $starttime;
        $results['timestamp'] = time();
        $results['fromrev'] = $fromrev;
        $results['torev'] = $torev;
        $results['status'] = 'success';
        $results['subdeployment'] = $subdeployment;
        NagTester::setDeploymentDiffInfo($deployment, $subdeployment, $results);
    }
    unset($starttime, $results, $return);
}

function hostaudit($deployment)
{
    $revision = RevDeploy::getDeploymentRev($deployment);
    $buildReturn = NagCreate::buildDeployment($deployment, $revision, false, true, false);
    if ($buildReturn !== true) {
        $naglogger = new NagLogger();
        $naglogger->addToLog("Unable to properly build deployment: $deployment :: reason: $buildReturn");
        unset($buildReturn);
    }
    else {
        $testReturn = NagCreate::testDeployment($deployment);
        $results = array();
        $results['last_updated'] = time();
        $results['hosts_without_services'] = array();
        $results['hosts_without_services']['count'] = 0;
        $results['hosts_without_services']['hosts'] = array();
        $results['hosts_without_contacts'] = array();
        $results['hosts_without_contacts']['count'] = 0;
        $results['hosts_without_contacts']['hosts'] = array();
        $results['services_without_contacts'] = array();
        $results['services_without_contacts']['count'] = 0;
        foreach ($testReturn['output'] as $index => $line) {
            if (preg_match("/Warning: Host '(.+)' has no services associated with it!/", $line, $matches)) {
                ++$results['hosts_without_services']['count'];
                array_push($results['hosts_without_services']['hosts'], $matches[1]);
            }
            elseif (preg_match("/Warning: Host '(.+)' has no default contacts or contactgroups defined!/", $line, $matches)) {
                ++$results['hosts_without_contacts']['count'];
                array_push($results['hosts_without_contacts']['hosts'], $matches[1]);
            }
            elseif (preg_match("/Warning: Service '(.+)' on host '(.+)' has no default contacts or contactgroups defined!/", $line, $matches)) {
                $key = preg_replace("/\W+/", "_", strtolower($matches[1]));
                $key = trim($key, "_");
                if ((!isset($results['services_without_contacts'][$key])) || (!is_array($results['services_without_contacts'][$key]))) {
                    ++$results['services_without_contacts']['count'];
                    $results['services_without_contacts'][$key] = array();
                    $results['services_without_contacts'][$key]['count'] = 0;
                    $results['services_without_contacts'][$key]['hosts'] = array();
                }
                ++$results['services_without_contacts'][$key]['count'];
                array_push($results['services_without_contacts'][$key]['hosts'], $matches[2]);
            }
        }
        NagTester::setDeploymentHostAuditInfo($deployment, json_encode($results));
        unset($testReturn, $buildReturn);
    }
    return;
}

/**
 * Envoke Signal Handling function
 */
$run = true;
pcntl_signal(SIGTERM, "sighandler");
pcntl_signal(SIGQUIT, "sighandler");
pcntl_signal(SIGINT, "sighandler");
pcntl_signal(SIGQUIT, "sighandler");
pcntl_signal(SIGABRT, "sighandler");
/**
 * Write PID File
 */
file_put_contents(PIDFILE, getmypid());
/**
 * Initialize Beanstalkd Connection
 */
NagPhean::init(BEANSTALKD_SERVER, BEANSTALKD_TUBE, true);
/**
 * While Main Loop
 */
while ($run) {
    $job = NagPhean::reserveJob();
    $data = $job->getData();
    $jsonObj = json_decode($data);
    if ($jsonObj->type == 'test') {
        NagRedis::init(true);
        $lockReturn = NagTester::setDeploymentTestLock($jsonObj->deployment, $jsonObj->subdeployment, $jsonObj->revision);
        if ($lockReturn !== false) {
            testBuild($jsonObj->deployment, $jsonObj->revision, $jsonObj->subdeployment, $jsonObj->shard);
            NagPhean::delJob($job);
            NagTester::deleteDeploymentTestLock($jsonObj->deployment, $jsonObj->subdeployment, $jsonObj->revision);
        }
        unset($lockReturn);
    }
    elseif ($jsonObj->type == 'build') {
        NagRedis::init(true);
        $lockReturn = NagTester::setDeploymentBuildLock($jsonObj->deployment, $jsonObj->subdeployment, $jsonObj->revision);
        if ($lockReturn !== false) {
            showBuild($jsonObj->deployment, $jsonObj->revision, $jsonObj->subdeployment, $jsonObj->shard);
            NagPhean::delJob($job);
            NagTester::deleteDeploymentBuildLock($jsonObj->deployment, $jsonObj->subdeployment, $jsonObj->revision);
        }
        unset($lockReturn);
    }
    elseif ($jsonObj->type == 'diff') {
        $lockReturn = NagTester::setDeploymentDiffLock($jsonObj->deployment, $jsonObj->subdeployment);
        if ($lockReturn !== false) {
            diffBuild($jsonObj->deployment, $jsonObj->fromrev, $jsonObj->torev, $jsonObj->subdeployment, $jsonObj->shard);
            NagPhean::delJob($job);
            NagTester::deleteDeploymentDiffLock($jsonObj->deployment, $jsonObj->subdeployment);
        }
    }
    elseif ($jsonObj->type == 'hostaudit') {
        // Not setting a lock, since this is a background job and doesn't return directly too the user...
        hostaudit($jsonObj->deployment);
        NagPhean::delJob($job);
    }
    unset($job, $data, $jsonObj);
}

